<?php

declare(strict_types=1);

// Define a constant for the package path, defaulting to the current directory
define('PACKAGE_PATH', __DIR__ . DIRECTORY_SEPARATOR . '..');

// Set default paths using the PACKAGE_PATH constant
$srcDirectory = PACKAGE_PATH . '/src';
$testsDirectory = PACKAGE_PATH . '/tests';
$backupListFile = PACKAGE_PATH . '/backup_list.txt';
$excludedFoldersFile = PACKAGE_PATH . '/excluded_folders.txt';
$checkMarker = true;

// Override defaults with command line arguments
$options = getopt("", ["package_path::", "src::", "tests::", "backup::", "exclude::", "marker::"]);

// Update PACKAGE_PATH if provided via command-line argument
if (isset($options['package_path'])) {
    define('PACKAGE_PATH', $options['package_path']);
}

// Update paths if command-line arguments are passed
$srcDirectory = $options['src'] ?? PACKAGE_PATH . '/src';
$testsDirectory = $options['tests'] ?? PACKAGE_PATH . '/tests';
$backupListFile = $options['backup'] ?? PACKAGE_PATH . '/backup_list.txt';
$excludedFoldersFile = $options['exclude'] ?? PACKAGE_PATH . '/excluded_folders.txt';
$checkMarker = isset($options['marker']) ? filter_var($options['marker'], FILTER_VALIDATE_BOOLEAN) : true;

// Load the backup list
$backupList = file_exists($backupListFile) ? file($backupListFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) : [];

// Load the list of excluded folders
$excludedFolders = file_exists($excludedFoldersFile) ? file($excludedFoldersFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) : [];

// Function to get namespace and use statements
function getNamespaceAndUses(string $filePath): array
{
    $namespace = '';
    $uses = [];

    $lines = file($filePath, FILE_IGNORE_NEW_LINES);
    foreach ($lines as $line) {
        if (str_starts_with($line, 'namespace')) {
            $namespace = $line;
        } elseif (str_starts_with($line, 'use')) {
            $uses[] = $line;
        }
        if ($namespace && str_contains(trim($line), ';')) {
            break;
        }
    }
    return [$namespace, $uses];
}
function recreateTestFile(string $srcFilePath, string $testDirectory, array $backupList, bool $checkMarker): void
{
    $relativePath = str_replace('src/', '', $srcFilePath);
    $testFilePath = $testDirectory . '/' . str_replace('.php', 'Test.php', $relativePath);

    // Skip if not in the backup list
    if (!in_array($testFilePath, $backupList)) {
        echo "Skipped: $testFilePath (not in backup list)\n";
        return;
    }

    // Check for marker if option is enabled
    if ($checkMarker && file_exists($testFilePath)) {
        $testFileContent = file_get_contents($testFilePath);
        if (!str_contains($testFileContent, '// Generated by script')) {
            echo "Skipped: $testFilePath (not generated by this script)\n";
            return;
        }
    }

    // Extract namespace and use-statements
    [$namespace, $useStatements] = getNamespaceAndUses($srcFilePath);
    $testNamespace = $namespace ? str_replace('namespace ', 'namespace Tests\\', $namespace) : '';

    // Prepare content for test file
    $className = basename($relativePath, '.php') . 'Test';
    $content = "<?php\n\ndeclare(strict_types=1);\n\n// Generated by script\n\n";
    if ($testNamespace) {
        $content .= $testNamespace . "\n\n";
    }
    $content .= "use PHPUnit\\Framework\\TestCase;\n";
    foreach ($useStatements as $useStatement) {
        $content .= $useStatement . "\n";
    }
    $content .= "\nclass $className extends TestCase\n{\n    // TODO: Add test methods for " . basename($relativePath) . "\n}\n";

    // Write content to the test file
    file_put_contents($testFilePath, $content);
    echo "Recreated: $testFilePath\n";
}

// Iterate through files in the source directory
$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($srcDirectory));
foreach ($iterator as $file) {
    if (
        $file->isFile() && $file->getExtension() === 'php'
    ) {
        $filePath = $file->getPathname();
        $isExcluded = false;

        // Check if the file is in an excluded folder
        foreach ($excludedFolders as $excludedFolder) {
            if (str_contains($filePath, trim($excludedFolder))) {
                $isExcluded = true;
                break;
            }
        }

        if (!$isExcluded) {
            recreateTestFile($filePath, $testsDirectory, $backupList, $checkMarker);
        }
    }
}
