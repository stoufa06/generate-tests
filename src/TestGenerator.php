<?php

namespace Stoufa06\GenerateTests;

class TestGenerator
{
    private string $srcDirectory;
    private string $testsDirectory;
    private array $backupList;
    private array $excludedFolders;
    private bool $checkMarker;

    public function __construct(
        string $srcDirectory = 'src',
        string $testsDirectory = 'tests',
        string $backupListFile = 'backup_list.txt',
        string $excludedFoldersFile = 'excluded_folders.txt',
        bool $checkMarker = true
    ) {
        $baseDirectory = getcwd();

        $this->srcDirectory = rtrim($baseDirectory . DIRECTORY_SEPARATOR . $srcDirectory, DIRECTORY_SEPARATOR);
        $this->testsDirectory = rtrim($baseDirectory . DIRECTORY_SEPARATOR . $testsDirectory, DIRECTORY_SEPARATOR);

        $backupListPath = $baseDirectory . DIRECTORY_SEPARATOR . $backupListFile;
        $excludedFoldersPath = $baseDirectory . DIRECTORY_SEPARATOR . $excludedFoldersFile;

        $this->backupList = file_exists($backupListPath) ? file($backupListPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) : [];
        $this->excludedFolders = file_exists($excludedFoldersPath) ? file($excludedFoldersPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) : [];
        $this->checkMarker = $checkMarker;
    }

    public function generate(): void
    {
        $this->ensureDirectoryExists($this->testsDirectory);
        $sourceFiles = $this->getSourceFiles($this->srcDirectory);

        foreach ($sourceFiles as $file) {
            $this->generateTestForFile($file);
        }
    }

    private function ensureDirectoryExists(string $directory): void
    {
        if (!is_dir($directory)) {
            mkdir($directory, 0777, true);
            echo "Created directory: $directory\n";
        }
    }

    private function getSourceFiles(string $directory): array
    {
        $files = [];
        $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($directory));

        foreach ($iterator as $file) {
            if ($file->isFile() && $file->getExtension() === 'php' && !$this->isExcluded($file->getPathname())) {
                $files[] = $file->getPathname();
            }
        }
        return $files;
    }

    private function isExcluded(string $filePath): bool
    {
        foreach ($this->excludedFolders as $folder) {
            if (strpos($filePath, $folder) !== false) {
                return true;
            }
        }

        return in_array($filePath, $this->backupList);
    }

    private function generateTestForFile(string $filePath): void
    {
        $baseName = basename($filePath, '.php');
        $className = $baseName . 'Test';
        $testFileName = $this->testsDirectory . DIRECTORY_SEPARATOR . $className . '.php';

        if (!$this->shouldGenerateTest($testFileName)) {
            return;
        }

        $testContent = $this->generateTestContent($className);
        file_put_contents($testFileName, $testContent);
        echo "Generated test for: $filePath\n";
    }

    private function shouldGenerateTest(string $testFileName): bool
    {
        if (in_array($testFileName, $this->backupList)) {
            echo "Generating: $testFileName (listed in backup list)\n";
            return true;
        }

        if (file_exists($testFileName)) {
            if ($this->checkMarker) {
                $testFileContent = file_get_contents($testFileName);
                if (strpos($testFileContent, '// Generated by script') !== false) {
                    echo "Generating: $testFileName (previously generated by this script)\n";
                    return true;
                }
            }

            // Skip if the marker is not checked and the file exists
            echo "Skipped: $testFileName (marker not enabled and file exists)\n";
            return false;
        }

        // If the file does not exist, generate it
        return true;
    }

    private function generateTestContent(string $className): string
    {
        return <<<EOD
            <?php

            declare(strict_types=1);

            use PHPUnit\Framework\TestCase;

            // Generated by script

            class {$className} extends TestCase
            {
                public function testExample()
                {
                    \$this->assertTrue(true);
                }
            }
            EOD;
    }
}
