<?php

namespace Stoufa06\GenerateTests;

use UnexpectedValueException;

class TestGenerator
{
    private string $srcDirectory;
    private string $testsDirectory;
    private array $backupList;
    private array $excludedFolders;
    private bool $checkMarker;
    private string $baseDirectory;
    private $marker = '// Generated by script';
    private $markerDefaultLineNumber = 5; // Default position if known

    public function __construct(
        string $srcDirectory = 'src',
        string $testsDirectory = 'tests',
        string $backupListFile = 'backup_list.txt',
        string $excludedFoldersFile = 'excluded_folders.txt',
        bool $checkMarker = true,
        string $baseDirectory = null // New optional parameter
    ) {
        $this->baseDirectory = $baseDirectory ?? getcwd(); // Default to current working directory
        
        $srcDirectory = $this->resolvePath($srcDirectory);;
        if (!is_dir($srcDirectory)) {
            throw new UnexpectedValueException("Source directory does not exist: $srcDirectory");
        }
        if (!is_dir($testsDirectory)) {
            mkdir($testsDirectory, 0777, true);
        }

        

        $this->srcDirectory = $this->resolvePath($srcDirectory);
        $this->testsDirectory = $this->resolvePath($testsDirectory);

        $backupListPath = $this->resolvePath($backupListFile);
        $excludedFoldersPath = $this->resolvePath($excludedFoldersFile);

        $this->backupList = file_exists($backupListPath) ? file($backupListPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) : [];
        $this->excludedFolders = file_exists($excludedFoldersPath) ? file($excludedFoldersPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) : [];
        $this->checkMarker = $checkMarker;
    }

    private function resolvePath(string $path): string
    {
        // Check if the path is already absolute
        if ($this->isAbsolutePath($path)) {
            return rtrim($path, DIRECTORY_SEPARATOR);
        }
        // Otherwise, join with the base directory
        return $this->baseDirectory . DIRECTORY_SEPARATOR . trim($path, DIRECTORY_SEPARATOR);
    }

    private function isAbsolutePath(string $path): bool
    {
        // Check for Windows absolute paths (e.g., C:\ or \\)
        if (preg_match('/^[a-zA-Z]:\\\\|\\\\\\\\/', $path)) {
            return true;
        }
        // Check for Unix absolute paths (e.g., /)
        return $path[0] === DIRECTORY_SEPARATOR;
    }

    public function generate(): void
    {
        $this->ensureDirectoryExists($this->testsDirectory);
        $sourceFiles = $this->getSourceFiles($this->srcDirectory);

        foreach ($sourceFiles as $file) {
            $this->generateTestForFile($file);
        }
    }

    protected function ensureDirectoryExists(string $directory): void
    {
        if (!is_dir($directory)) {
            mkdir($directory, 0777, true);
            echo "Created directory: $directory\n";
        }
    }

    private function getSourceFiles(string $directory): array
    {
        $files = [];
        $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($directory));

        foreach ($iterator as $file) {
            if ($file->isFile() && $file->getExtension() === 'php' && !$this->isExcluded($file->getPathname())) {
                $files[] = $file->getPathname();
            }
        }
        return $files;
    }

    private function isExcluded(string $filePath): bool
    {
        foreach ($this->excludedFolders as $folder) {
            if (strpos($filePath, $folder) !== false) {
                return true;
            }
        }

        return in_array($filePath, $this->backupList);
    }

    private function generateTestForFile(string $filePath): void
    {
        $baseName = basename($filePath, '.php');
        $className = $baseName . 'Test';
        $testFileName = $this->testsDirectory . DIRECTORY_SEPARATOR . $className . '.php';

        if (!$this->shouldGenerateTest($testFileName)) {
            return;
        }

        $testContent = $this->generateTestContent($className);
        file_put_contents($testFileName, $testContent);
        echo "Generated test for: $filePath\n";
    }

    private function shouldGenerateTest(string $testFileName): bool
    {
        if (in_array($testFileName, $this->backupList)) {
            echo "Generating: $testFileName (listed in backup list)\n";
            return true;
        }

        if (file_exists($testFileName)) {
            if ($this->checkMarker) {
                $testFileContent = file_get_contents($testFileName);
                $currentMarkerLineNumber = $this->findMarkerLineNumberFromString($testFileContent, $this->marker);

                if ($currentMarkerLineNumber === $this->markerDefaultLineNumber) {
                    echo "Generating: $testFileName (marker position consistent)\n";
                    return true;
                } else {
                    echo "Skipped: $testFileName (marker line mismatch)\n";
                    return false;
                }
            }

            echo "Skipped: $testFileName (marker not enabled and file exists)\n";
            return false;
        }

        // If the file does not exist, generate it
        return true;
    }

    private function findMarkerLineNumberFromString(string $content, string $marker): ?int
    {
        $lines = explode("\n", $content);
        foreach ($lines as $lineNumber => $line) {
            if (strpos($line, $marker) !== false) {
                return $lineNumber + 1; // +1 for 1-based index
            }
        }
        return null;
    }

    private function generateTestContent(string $className): string
    {
        return <<<EOD
            <?php
            
            declare(strict_types=1);

            {$this->marker}

            use PHPUnit\Framework\TestCase;

            class {$className} extends TestCase
            {
                public function testExample()
                {
                    \$this->assertTrue(true);
                }
            }
            EOD;
    }
}
